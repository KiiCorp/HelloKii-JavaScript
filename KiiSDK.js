// Generated by CoffeeScript 1.3.3
(function() {
  var KiiRequest, KiiUtilities, root, _Kii, _KiiSocialConnect,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Function.prototype.define = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  root.KiiSocialNetworkName = {
    FACEBOOK: 1
  };

  /**
      @class The main SDK class
      @exports root.Kii as Kii
      
      This class must be initialized before any Kii SDK functions are performed. This class also allows the application to make some high-level user calls and access some application-wide data at any time using static methods.
  */


  root.Kii = (function() {
    var _instance;

    function Kii() {}

    _instance = null;

    /** 
        Kii SDK Build Number
        @returns {String} current build number of the SDK
    */


    Kii.getBuildNumber = function() {
      return "1";
    };

    /** 
        Kii SDK Version Number
        @returns {String} current version number of the SDK
    */


    Kii.getSDKVersion = function() {
      return "1.0";
    };

    Kii.setCurrentUser = function(user) {
      return _instance._currentUser = jQuery.extend(true, {}, user);
    };

    Kii.getBaseURL = function() {
      return _instance._baseURL;
    };

    /**
        Set a custom API endpoint URL
        @param String url A string containing the desired endpoint
    */


    Kii.setBaseURL = function(url) {
      Kii.logger("Setting base URL: " + url);
      return _instance._baseURL = url;
    };

    /**
        Retrieve the current app ID
        @returns {String} The current app ID
    */


    Kii.getAppID = function() {
      return _instance._appID;
    };

    /**
        Retrieve the current app key
        @returns {String} The current app key
    */


    Kii.getAppKey = function() {
      return _instance._appKey;
    };

    /**
        Is the SDK printing logs to the console?
        @returns {Boolean} True if printing logs, false otherwise
    */


    Kii.isLogging = function() {
      return _instance._logging;
    };

    /**
        Set the logging status of the SDK
        
        Helpful for development - we strongly advice you turn off logging for any production code.
        @param Boolean True if logs should be printed, false otherwise
        @example
        Kii.setLogging(true);
    */


    Kii.setLogging = function(logging) {
      Kii.logger("Setting logging: " + logging);
      return _instance._logging = logging;
    };

    /** Initialize the Kii SDK
    
    Should be the first Kii SDK action your application makes
    @param String appID The application ID found in your Kii developer console
    @param String appKey The application key found in your Kii developer console
    @example
    Kii.initialize("my-app-id", "my-app-key");
    */


    Kii.initialize = function(appID, appKey) {
      if (_instance == null) {
        _instance = new _Kii(appID, appKey);
      }
      return Kii.logger("Kii SDK initialized: [" + appID + ", " + appKey + "]");
    };

    Kii.error = function(message) {
      return console.log("KiiSDK Error => " + message);
    };

    /** 
        Utilize the Kii logger to track SDK-specific actions
        
        Helpful for development - we strongly advice you turn off logging for any production code.
        @param String message The message to print to console.log in your browser
        @example
        Kii.logger("My message");
    */


    Kii.logger = function(message) {
      if (_instance._logging) {
        return console.log(message);
      }
    };

    /**
        Creates a reference to a bucket for this user
        
        <br><br>The bucket will be created/accessed within this app's scope
        @param String bucketName The name of the bucket the app should create/access
        @returns {KiiBucket} A working KiiBucket object
        @example
        var bucket = Kii.bucketWithName("myBucket");
    */


    Kii.bucketWithName = function(bucketName) {
      return new KiiBucket.bucketWithName(bucketName, null);
    };

    /** 
        Creates a reference to a group with the given name
    
        @param {String} groupName An application-specific group name
        @returns {KiiGroup} A new KiiGroup reference
        @example
        var group = new Kii.groupWithName("myGroup");
    */


    Kii.groupWithName = function(groupName) {
      return new Kii.groupWithNameAndMembers(groupName, null);
    };

    /** 
        Creates a reference to a group with the given name and a list of default members
    
        @param {String} groupName An application-specific group name
        @param {Array} members An array of KiiUser objects to add to the group
        @returns {KiiGroup} A new KiiGroup reference
        @example
        var group = new KiiGroup.groupWithName("myGroup", members);
    */


    Kii.groupWithNameAndMembers = function(groupName, members) {
      return new KiiGroup.groupWithNameAndMembers(groupName, members);
    };

    Kii.logOut = function() {
      return _instance._currentUser = null;
    };

    Kii.loggedIn = function() {
      return _instance._currentUser != null;
    };

    Kii.getCurrentUser = function() {
      if (_instance._currentUser != null) {
        return jQuery.extend(true, {}, _instance._currentUser);
      } else {
        return null;
      }
    };

    return Kii;

  })();

  _Kii = (function() {

    _Kii.prototype._logging = true;

    _Kii.prototype._baseURL = "http://api.kii.com/v/1.0";

    _Kii.prototype._currentUser = null;

    function _Kii(appID, appKey) {
      this._appKey = appKey;
      this._appID = appID;
    }

    return _Kii;

  })();

  /**
      @class Represents a KiiACL object
      @exports root.KiiACL as KiiACL
  */


  root.KiiACL = (function() {
    var _thisACL;

    function KiiACL() {
      this.save = __bind(this.save, this);

      this._saveWithIndex = __bind(this._saveWithIndex, this);

      this.removeACLEntry = __bind(this.removeACLEntry, this);

      this.putACLEntry = __bind(this.putACLEntry, this);

      this.listACLEntries = __bind(this.listACLEntries, this);

      this._saveSingle = __bind(this._saveSingle, this);

      this.aclPath = __bind(this.aclPath, this);

    }

    _thisACL = null;

    KiiACL.prototype._className = "KiiACL";

    KiiACL.prototype._entries = [];

    KiiACL.prototype._parent = null;

    KiiACL.prototype.aclPath = function() {
      var bucket, bucketName, group, object, objectId, path, user;
      if (this._parent._className === "KiiObject") {
        object = this._parent;
        if (object.bucket.user != null) {
          user = object.bucket.user;
        } else if (object.bucket.group != null) {
          group = object.bucket.group;
        }
        bucketName = object.bucket.name;
        objectId = object.uuid;
      } else if (this._parent._className === "KiiBucket") {
        bucket = this._parent;
        if (bucket.user != null) {
          user = bucket.user;
        } else if (bucket.group != null) {
          group = bucket.group;
        }
        bucketName = bucket.name;
      } else {
        Kii.error("Invalid ACL parent. Must belong to a KiiObject");
      }
      path = "/";
      if (group != null) {
        path += "groups/" + group.uuid;
      } else if (user != null) {
        path += "users/" + user.uuid;
      }
      if (objectId != null) {
        path += "/buckets/" + bucketName + "/objects/" + objectId + "/acl";
      } else {
        path += "/buckets/" + bucketName + "/acl";
      }
      return path;
    };

    KiiACL.prototype._saveSingle = function(aclEntry, callback) {
      var path, request, saveCallbacks,
        _this = this;
      path = "" + (this.aclPath()) + "/" + (aclEntry.getActionString()) + "/" + (aclEntry.getEntityString());
      request = new KiiRequest(path, true);
      request.method = aclEntry.grant === true ? "PUT" : "DELETE";
      saveCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            aclEntry.updated = true;
            return callback();
          } else {
            return callback();
          }
        },
        failure: function(error, statusCode, errorCode) {
          if (errorCode === "ACL_ALREADY_EXISTS") {
            aclEntry.updated = true;
          }
          return callback();
        }
      };
      return request.execute(saveCallbacks, true);
    };

    /** Get the list of active ACLs associated with this object from the server
    @param Object callbacks An object with callback methods defined
    @param Method callbacks.success The callback method to call on a successful list request
    @param Method callbacks.failure The callback method to call on a failed list request
    @example
    var acl = . . .; // a KiiACL object
    acl.listACLEntries({
    	success: function(theACL, theEntries) {
    		// do something
    	},
    	
    	failure: function(theACL, anErrorString) {
    		// do something with the error response
    	}
    });
    */


    KiiACL.prototype.listACLEntries = function(callbacks) {
      var listCallbacks, request,
        _this = this;
      _thisACL = this;
      Kii.logger("Listing ACL entries");
      request = new KiiRequest(this.aclPath(), true);
      listCallbacks = {
        success: function(data, statusCode) {
          var action, entity, key, results, subject, value, _i, _len;
          if (statusCode < 300 && statusCode >= 200) {
            results = [];
            for (key in data) {
              value = data[key];
              if (key === "WRITE_EXISTING_OBJECT") {
                action = KiiACLAction.KiiACLObjectActionWrite;
              } else if (key === "READ_EXISTING_OBJECT") {
                action = KiiACLAction.KiiACLObjectActionRead;
              } else if (key === "QUERY_OBJECTS_IN_BUCKET") {
                action = KiiACLAction.KiiACLBucketActionQueryObjects;
              } else if (key === "CREATE_OBJECTS_IN_BUCKET") {
                action = KiiACLAction.KiiACLBucketActionCreateObjects;
              } else if (key === "DROP_BUCKET_WITH_ALL_CONTENT") {
                action = KiiACLAction.KiiACLBucketActionDropBucket;
              }
              for (_i = 0, _len = value.length; _i < _len; _i++) {
                entity = value[_i];
                if (entity.groupID != null) {
                  subject = KiiGroup.groupWithID(entity.groupID);
                } else if (entity.userID != null) {
                  subject = KiiUser.userWithID(entity.userID);
                }
                results.push(KiiACLEntry.entryWithSubject(subject, action));
              }
            }
            return callbacks.success(_thisACL, results);
          } else {
            return callbacks.failure(_thisACL, "Unable to retrieve ACL list");
          }
        },
        failure: function(error, statusCode) {
          return callbacks.failure(_thisACL, error);
        }
      };
      return request.execute(listCallbacks, false);
    };

    /** Add a KiiACLEntry to the local object, if not already present
    @param KiiACLEntry entry The KiiACLEntry to add
    @example
    var aclEntry = . . .; // a KiiACLEntry object
    var acl = . . .; // a KiiACL object
    acl.putACLEntry(aclEntry);
    */


    KiiACL.prototype.putACLEntry = function(entry) {
      if (($.inArray(entry, this._entries)) === -1) {
        return this._entries.push(entry);
      }
    };

    /** Remove a KiiACLEntry to the local object
    @param KiiACLEntry entry The KiiACLEntry to remove
    @example 
    var aclEntry = . . .; // a KiiACLEntry object
    var acl = . . .; // a KiiACL object
    acl.removeACLEntry(aclEntry);
    */


    KiiACL.prototype.removeACLEntry = function(entry) {
      var ndx;
      ndx = $.inArray(entry, this._entries);
      if (ndx > -1) {
        return KiiUtilities.arrayRemove(this._entries, ndx, ndx);
      }
    };

    KiiACL.prototype._saveWithIndex = function(callbacks, index) {
      var entry,
        _this = this;
      _thisACL = this;
      entry = this._entries[index];
      if (entry != null) {
        this._saveSingle(entry, function() {
          return _thisACL._saveWithIndex(callbacks, index + 1);
        });
        return;
      }
      return callbacks.success(this);
    };

    /** Save the list of ACLEntry objects associated with this ACL object to the server
    @param Object callbacks An object with callback methods defined
    @param Method callbacks.success The callback method to call on a successful save request
    @param Method callbacks.failure The callback method to call on a failed save request
    @example
    var obj = . . .; // a KiiObject
    obj.save({
        success: function(theSavedACL) {
            // do something with the saved acl
        },
    
        failure: function(theACL, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiACL.prototype.save = function(callbacks) {
      return this._saveWithIndex(callbacks, 0);
    };

    KiiACL.aclWithParent = function(parent) {
      var acl;
      acl = new KiiACL();
      acl._parent = parent;
      return acl;
    };

    return KiiACL;

  }).call(this);

  root.KiiACLAction = {
    KiiACLBucketActionCreateObjects: 0,
    KiiACLBucketActionQueryObjects: 1,
    KiiACLBucketActionDropBucket: 2,
    KiiACLObjectActionRead: 3,
    KiiACLObjectActionWrite: 4
  };

  /**
      @class Represents a KiiACLEntry object
      @exports root.KiiACLEntry as KiiACLEntry
  */


  root.KiiACLEntry = (function() {

    function KiiACLEntry() {
      this.getEntityString = __bind(this.getEntityString, this);

      this.getActionString = __bind(this.getActionString, this);

      this.setSubject = __bind(this.setSubject, this);

      this.setAction = __bind(this.setAction, this);

    }

    KiiACLEntry.prototype._updated = false;

    /** The action that is being permitted/restricted. Possible values:
    <br><br>
    KiiACLBucketActionCreateObjects,<br>
    KiiACLBucketActionQueryObjects,	 <br>
    KiiACLBucketActionDropBucket,<br>
    KiiACLObjectActionRead,<br>
    KiiACLObjectActionWrite
    */


    KiiACLEntry.prototype.action = -1;

    /** The KiiUser or KiiGroup entity that is being permitted/restricted
    */


    KiiACLEntry.prototype.subject = null;

    /** When TRUE, the associated action is granted. When FALSE, the action is restricted
    */


    KiiACLEntry.prototype.grant = true;

    /** Create a KiiACLEntry object with a subject and action
    
    The entry will not be applied on the server until the KiiACL object is explicitly saved. This method simply returns a working KiiACLEntry with a specified subject and action.
    @param {KiiGroup|KiiUser} subject A KiiGroup or KiiUser object to which the action/grant is being applied
    @param {KiiACLAction} action One of the specified KiiACLAction values the permissions is being applied to
    @return A KiiACLEntry object with the specified attributes
    */


    KiiACLEntry.entryWithSubject = function(subject, action) {
      var entry;
      entry = new KiiACLEntry();
      entry.setSubject(subject);
      entry.setAction(action);
      return entry;
    };

    KiiACLEntry.prototype.setAction = function(value) {
      return this.action = value;
    };

    KiiACLEntry.prototype.setSubject = function(value) {
      if (value._className === "KiiGroup" || value._className === "KiiUser") {
        return this.subject = value;
      } else {
        return Kii.error("Invalid ACL Subject - must be of class KiiUser or KiiGroup");
      }
    };

    KiiACLEntry.prototype.getActionString = function() {
      var retString;
      Kii.logger("Action: " + this.action);
      switch (this.action) {
        case KiiACLAction.KiiACLBucketActionCreateObjects:
          retString = "CREATE_OBJECTS_IN_BUCKET";
          break;
        case KiiACLAction.KiiACLBucketActionQueryObjects:
          retString = "QUERY_OBJECTS_IN_BUCKET";
          break;
        case KiiACLAction.KiiACLBucketActionDropBucket:
          retString = "DROP_BUCKET_WITH_ALL_CONTENT";
          break;
        case KiiACLAction.KiiACLObjectActionRead:
          retString = "READ_EXISTING_OBJECT";
          break;
        case KiiACLAction.KiiACLObjectActionWrite:
          retString = "WRITE_EXISTING_OBJECT";
          break;
        default:
          return retString;
      }
      return retString;
    };

    KiiACLEntry.prototype.getEntityString = function() {
      var entityId, type;
      if (this.subject._className === "KiiGroup") {
        entityId = this.subject.uuid;
        type = "GroupID";
      } else if (this.subject._className === "KiiUser") {
        entityId = this.subject.uuid;
        type = "UserID";
      }
      return "" + type + ":" + entityId;
    };

    return KiiACLEntry;

  }).call(this);

  /**
      @class Represents a KiiBucket object
      @exports root.KiiBucket as KiiBucket
  */


  root.KiiBucket = (function() {
    var _thisBucket;

    function KiiBucket() {
      this.objectWithJSON = __bind(this.objectWithJSON, this);

      this.executeQuery = __bind(this.executeQuery, this);

      this.acl = __bind(this.acl, this);

      this.createObjectWithType = __bind(this.createObjectWithType, this);

      this.createObject = __bind(this.createObject, this);

    }

    KiiBucket.prototype._className = "KiiBucket";

    _thisBucket = null;

    KiiBucket.prototype.user = null;

    KiiBucket.prototype.group = null;

    /** The name of this bucket 
    @type String
    */


    KiiBucket.prototype.name = null;

    /** Create a KiiObject within the current bucket
    
    <br><br>The object will not be created on the server until the KiiObject is explicitly saved. This method simply returns an empty working KiiObject.
    @returns {KiiObject} An empty KiiObject with no specific type
    @example
    var bucket = . . .; // a KiiBucket
    var object = bucket.createObject();
    */


    KiiBucket.prototype.createObject = function() {
      return KiiObject.objectWithBucket(this, null);
    };

    /** Create a KiiObject within the current bucket, with type
    
    <br><br>The object will not be created on the server until the KiiObject is explicitly saved. This method simply returns an empty working KiiObject with a specified type. The type allows for better indexing and improved query results. It is recommended to use this method - but for lazy creation, the createObject method is also available.
    @param String type A string representing the desired object type
    @returns An empty KiiObject with specified type
    @example 
    var bucket = . . .; // a KiiBucket
    var object = bucket.createObjectWithType("scores");
    */


    KiiBucket.prototype.createObjectWithType = function(type) {
      return KiiObject.objectWithBucket(this, type);
    };

    /** Get the ACL handle for this bucket
    
    <br><br>Any KiiACLEntry objects added or revoked from this ACL object will be appended to/removed from the server on ACL save. 
    	@returns {KiiACL} A KiiACL object associated with this KiiObject
    	@example 
    	var bucket = . . .; // a KiiBucket
    	var acl = bucket.acl();
    */


    KiiBucket.prototype.acl = function() {
      return KiiACL.aclWithParent(this);
    };

    /** Perform a query on the given bucket
    
    <br><br>The query will be executed against the server, returning a result set.
    @param KiiQuery query An object with callback methods defined
    @param Object callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful query request
    @param {Method} callbacks.failure The callback method to call on a failed query request
    @example 
    var bucket = . . .; // a KiiBucket
    var queryObject = . . .; // a KiiQuery
    bucket.query(queryObject, {
        success: function(queryPerformed, resultSet) {
            // do something with the results
            for(var i=0; i&lt;resultSet.length; i++) {
                // do something with the object
                // resultSet[i]; // could be KiiObject, KiiGroup, KiiUser, etc
            }
        },
        
        failure: function(queryPerformed, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiBucket.prototype.executeQuery = function(query, callbacks) {
      var data, executeCallbacks, path, request,
        _this = this;
      _thisBucket = this;
      if (this.user != null) {
        path = "/users/" + this.user.uuid + "/buckets/" + this.name + "/query";
      } else if (this.group != null) {
        path = "/users/" + this.group.uuid + "/buckets/" + this.name + "/query";
      } else {
        path = "/buckets/" + this.name + "/query";
      }
      if (query != null) {
        data = query.dictValue();
      } else {
        data = {
          "clause": KiiQuery.emptyDictValue()
        };
      }
      request = new KiiRequest(path, true);
      request.method = "POST";
      request.contentType = "application/vnd.kii.QueryRequest+json";
      request.data = {
        bucketQuery: data
      };
      executeCallbacks = {
        success: function(data, statusCode) {
          var result, resultSet, _i, _len, _ref;
          if (statusCode < 300 && statusCode >= 200) {
            resultSet = [];
            _ref = data.results;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              result = _ref[_i];
              resultSet.push(_thisBucket.objectWithJSON(result));
            }
            if (callbacks != null) {
              return callbacks.success(query, resultSet);
            }
          } else if (callbacks != null) {
            return callbacks.failure(query, "Unable to parse response");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisBucket, error);
          }
        }
      };
      return request.execute(executeCallbacks, false);
    };

    KiiBucket.bucketWithName = function(bucketName, parent) {
      var bucket;
      bucket = new KiiBucket;
      bucket.name = bucketName;
      if (parent != null) {
        if (parent._className === "KiiGroup") {
          bucket.group = parent;
        } else if (parent._className === "KiiUser") {
          bucket.user = parent;
        }
      }
      return bucket;
    };

    KiiBucket.prototype.objectWithJSON = function(json) {
      var newobject;
      newobject = this.createObject();
      newobject._updateWithJSON(json);
      return newobject;
    };

    return KiiBucket;

  }).call(this);

  /**
      @class Represents a KiiGroup object
      @exports root.KiiGroup as KiiGroup
  */


  root.KiiGroup = (function() {
    var _addMembers, _removeMembers, _thisGroup;

    function KiiGroup() {
      this.getOwner = __bind(this.getOwner, this);

      this["delete"] = __bind(this["delete"], this);

      this.refresh = __bind(this.refresh, this);

      this.save = __bind(this.save, this);

      this.changeGroupName = __bind(this.changeGroupName, this);

      this._saveMembers = __bind(this._saveMembers, this);

      this.getMemberList = __bind(this.getMemberList, this);

      this._removeMember = __bind(this._removeMember, this);

      this._addMember = __bind(this._addMember, this);

      this.removeUser = __bind(this.removeUser, this);

      this.addUser = __bind(this.addUser, this);

      this.bucketWithName = __bind(this.bucketWithName, this);

      this.objectURI = __bind(this.objectURI, this);

    }

    _thisGroup = null;

    KiiGroup.prototype._className = "KiiGroup";

    _addMembers = [];

    _removeMembers = [];

    /** The UUID of the given group, assigned by the server
    @type String
    */


    KiiGroup.prototype.uuid = null;

    /** The name of this group
    @type String
    */


    KiiGroup.prototype.name = null;

    /** The creator of this group
    @type KiiUser
    */


    KiiGroup.prototype.owner = null;

    /** Get a specifically formatted string referencing the group
    
    <br><br>The group must exist in the cloud (have a valid UUID).
    @returns {String} A URI string based on the current group. null if a URI couldn't be generated.
    @example 
    var group = . . .; // a KiiGroup
    var uri = group.objectURI();
    */


    KiiGroup.prototype.objectURI = function() {
      if (this.uuid != null) {
        return "kiicloud://groups/" + this.uuid;
      } else {
        return null;
      }
    };

    /** Creates a reference to a bucket for this group
    
    <br><br>The bucket will be created/accessed within this group's scope
    @param {String} bucketName The name of the bucket the user should create/access
    @returns {KiiBucket} A working KiiBucket object
    @example 
    var group = . . .; // a KiiGroup
    var bucket = group.bucketWithName("myBucket");
    */


    KiiGroup.prototype.bucketWithName = function(bucketName) {
      return new KiiBucket.bucketWithName(bucketName, this);
    };

    /** Adds a user to the given group
    
    <br><br>This method will NOT access the server immediately. You must call save to add the user on the server. This allows multiple users to be added/removed before calling save.
    @param {KiiUser} member The user to be added to the group
    @example 
    var user = . . .; // a KiiUser
    var group = . . .; // a KiiGroup
    group.addUser(user);
    group.save(callbacks);
    */


    KiiGroup.prototype.addUser = function(member) {
      var ndx;
      if ($.inArray(member, _addMembers === -1)) {
        _addMembers.push(member);
      }
      ndx = $.inArray(member, _removeMembers);
      if (ndx >= 0) {
        return KiiUtilities.arrayRemove(_removeMembers, ndx, ndx);
      }
    };

    /** Removes a user from the given group
    
    <br><br>This method will NOT access the server immediately. You must call save to remove the user on the server. This allows multiple users to be added/removed before calling save.
    @param {KiiUser} member The user to be added to the group
    @example 
    var user = . . .; // a KiiUser
    var group = . . .; // a KiiGroup
    group.removeUser(user);
    group.save(callbacks);
    */


    KiiGroup.prototype.removeUser = function(member) {
      var ndx;
      if ($.inArray(member, _removeMembers === -1)) {
        _removeMembers.push(member);
      }
      ndx = $.inArray(member, _addMembers);
      if (ndx >= 0) {
        return KiiUtilities.arrayRemove(_addMembers, ndx, ndx);
      }
    };

    KiiGroup.prototype._addMember = function(member, callback) {
      var memberCallbacks, request,
        _this = this;
      _thisGroup = this;
      Kii.logger("Adding member " + member.uuid + " to group " + this.name);
      request = new KiiRequest("/groups/" + this.uuid + "/members/" + member.uuid, true);
      request.method = "PUT";
      memberCallbacks = {
        success: function(data, statusCode) {
          var ndx;
          ndx = $.inArray(member, _addMembers);
          KiiUtilities.arrayRemove(_addMembers, ndx, ndx);
          return callback();
        },
        failure: function(error, statusCode) {
          var ndx;
          ndx = $.inArray(member, _addMembers);
          KiiUtilities.arrayRemove(_addMembers, ndx, ndx);
          return callback();
        }
      };
      return request.execute(memberCallbacks, true);
    };

    KiiGroup.prototype._removeMember = function(member, callback) {
      var removeCallbacks, request,
        _this = this;
      _thisGroup = this;
      Kii.logger("Removing member " + member.uuid + " to group " + this.name);
      request = new KiiRequest("/groups/" + this.uuid + "/members/" + member.uuid, true);
      request.method = "DELETE";
      removeCallbacks = {
        success: function(data, statusCode) {
          var ndx;
          ndx = $.inArray(member, _removeMembers);
          KiiUtilities.arrayRemove(_removeMembers, ndx, ndx);
          return callback();
        },
        failure: function(error, statusCode) {
          var ndx;
          ndx = $.inArray(member, _removeMembers);
          KiiUtilities.arrayRemove(_removeMembers, ndx, ndx);
          return callback();
        }
      };
      return request.execute(removeCallbacks, true);
    };

    /** Gets a list of all current members of a group				
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful list request
    @param {Method} callbacks.failure The callback method to call on a failed list request
    @example 
    var group = . . .; // a KiiGroup
    group.getMemberList({
        success: function(theGroup, memberList) {
            // do something with the result
            for(var i=0; i&lt;memberList.length; i++){
                var u = memberList[i]; // a KiiUser within the group
            }
        },
        
        failure: function(theGroup, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiGroup.prototype.getMemberList = function(callbacks) {
      var listCallbacks, request,
        _this = this;
      _thisGroup = this;
      Kii.logger("Getting member list for group " + this.name);
      request = new KiiRequest("/groups/" + this.uuid + "/members", true);
      request.accept = "application/vnd.kii.MembersRetrievalResponse+json";
      listCallbacks = {
        success: function(data, statusCode) {
          var member, memberList, _i, _len, _ref;
          if (statusCode < 300 && statusCode >= 200) {
            memberList = [];
            _ref = data.members;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              member = _ref[_i];
              memberList.push(KiiUser.userWithID(member.userID));
            }
            if (callbacks != null) {
              return callbacks.success(_thisGroup, memberList);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_thisGroup, member, "Unable to get member list of group");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisGroup, error);
          }
        }
      };
      return request.execute(listCallbacks, true);
    };

    KiiGroup.prototype._saveMembers = function(callbacks) {
      var member, _i, _j, _len, _len1,
        _this = this;
      _thisGroup = this;
      for (_i = 0, _len = _removeMembers.length; _i < _len; _i++) {
        member = _removeMembers[_i];
        this._removeMember(member, function() {
          return _thisGroup._saveMembers(callbacks);
        });
        return;
      }
      for (_j = 0, _len1 = _addMembers.length; _j < _len1; _j++) {
        member = _addMembers[_j];
        this._addMember(member, function() {
          return _thisGroup._saveMembers(callbacks);
        });
        return;
      }
      return callbacks.success(_thisGroup);
    };

    /** Updates the group name on the server
    
    @param {String} newName A String of the desired group name
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful save request
    @param {Method} callbacks.failure The callback method to call on a failed save request
    @example 
    var group = . . .; // a KiiGroup
    group.changeGroupName("myNewName", {
        success: function(theRenamedGroup) {
            // do something with the group
        },
        
        failure: function(theGroup, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiGroup.prototype.changeGroupName = function(newName, callbacks) {
      var request, saveCallbacks,
        _this = this;
      _thisGroup = this;
      Kii.logger("Saving group: " + this.name);
      if (this.uuid != null) {
        request = new KiiRequest("/groups/" + this.uuid + "/name", true);
        request.contentType = "text/plain";
        request.method = "PUT";
        request.data = newName;
        saveCallbacks = {
          success: function(data, statusCode) {
            if (statusCode < 300 && statusCode >= 200) {
              _thisGroup.name = newName;
              if (callbacks != null) {
                return callbacks.success(_thisGroup);
              }
            } else if (callbacks != null) {
              return callbacks.failure(_thisGroup, "Unable to change group name - invalid response");
            }
          },
          failure: function(error, statusCode) {
            if (callbacks != null) {
              return callbacks.failure(_thisGroup, error);
            }
          }
        };
        return request.execute(saveCallbacks, true);
      } else {
        return callbacks.failure(_thisGroup, "Invalid group. Save the group on the server before updating the name.");
      }
    };

    /** Saves the latest group values to the server
    
    <br><br>If the group does not yet exist, it will be created. If the group already exists, the fields that have changed will be updated accordingly.
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful save request
    @param {Method} callbacks.failure The callback method to call on a failed save request
    @example 
    var group = . . .; // a KiiGroup
    group.save({
        success: function(theSavedGroup) {
            // do something with the saved group
        },
        
        failure: function(theGroup, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiGroup.prototype.save = function(callbacks) {
      var data, request, saveCallbacks,
        _this = this;
      _thisGroup = this;
      Kii.logger("Saving group: " + this.name);
      if (!(this.uuid != null)) {
        request = new KiiRequest("/groups", true);
        request.contentType = "application/vnd.kii.GroupCreationRequest+json";
        request.method = "POST";
        data = {};
        if (this.name != null) {
          data.name = this.name;
        }
        if (Kii.getCurrentUser() != null) {
          this.owner = Kii.getCurrentUser();
          data.owner = this.owner.uuid;
        }
        request.data = data;
        saveCallbacks = {
          success: function(data, statusCode) {
            if (statusCode < 300 && statusCode >= 200) {
              _thisGroup.uuid = data.groupID;
              return _thisGroup._saveMembers(callbacks);
            }
          },
          failure: function(error, statusCode) {
            if (callbacks != null) {
              return callbacks.failure(_thisGroup, error);
            }
          }
        };
        return request.execute(saveCallbacks, false);
      } else {
        return this._saveMembers(callbacks);
      }
    };

    /** Updates the local group's data with the group data on the server
    
    <br><br>The group must exist on the server. Local data will be overwritten.    	
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful refresh request
    @param {Method} callbacks.failure The callback method to call on a failed refresh request
    @example 
    var group = . . .; // a KiiGroup
    group.refresh({
        success: function(theRefreshedGroup) {
            // do something with the refreshed group
        },
        
        failure: function(theGroup, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiGroup.prototype.refresh = function(callbacks) {
      var refreshCallbacks, request,
        _this = this;
      _thisGroup = this;
      Kii.logger("Refreshing group: " + this.name);
      request = new KiiRequest("/groups/" + this.uuid, true);
      request.accept = "application/vnd.kii.GroupRetrievalResponse+json";
      refreshCallbacks = {
        success: function(data, statusCode) {
          Kii.logger("succ");
          if (statusCode < 300 && statusCode >= 200) {
            _thisGroup = KiiGroup.groupWithJSON(data);
            Kii.logger("got something: ");
            Kii.logger(data);
            if (callbacks != null) {
              return callbacks.success(_thisGroup);
            }
          }
        },
        failure: function(error, statusCode) {
          Kii.logger("fail " + error);
          if (callbacks != null) {
            return callbacks.failure(_thisGroup, error);
          }
        }
      };
      return request.execute(refreshCallbacks, false);
    };

    /** Delete the group from the server
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful delete request
    @param {Method} callbacks.failure The callback method to call on a failed delete request
    @example 
    var group = . . .; // a KiiGroup
    group.delete({
        success: function(theDeletedGroup) {
            // do something
        },
        
        failure: function(theGroup, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiGroup.prototype["delete"] = function(callbacks) {
      var deleteCallbacks, request,
        _this = this;
      _thisGroup = this;
      Kii.logger("Deleting group: " + this.name);
      request = new KiiRequest("/groups/" + this.uuid, true);
      request.method = "DELETE";
      deleteCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success(_thisGroup);
          } else if (callbacks != null) {
            return callbacks.failure(_thisGroup, "Unable to parse response");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisGroup, error);
          }
        }
      };
      return request.execute(deleteCallbacks, true);
    };

    /** Gets the owner of the associated group
    
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful add request
    @param {Method} callbacks.failure The callback method to call on a failed add request
    @example 
    var group = . . .; // a KiiGroup
    group.getOwner({
        success: function(theGroup, theOwner) {
            // do something
        },
    
        failure: function(theGroup, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiGroup.prototype.getOwner = function(member, callbacks) {
      var _this = this;
      _thisGroup = this;
      Kii.logger("Getting owner of group " + this.name);
      return this.refresh({
        success: function(group) {
          if (callbacks != null) {
            return callbacks.success(group, group.owner);
          }
        },
        failure: function(group, error) {
          if (callbacks != null) {
            return callbacks.failure(group, error);
          }
        }
      });
    };

    /** Creates a reference to a group with the given name
    @param {String} groupName An application-specific group name
    @returns {KiiGroup} A new KiiGroup reference
    @example
    var group = new KiiGroup.groupWithName("myGroup");
    */


    KiiGroup.groupWithName = function(groupName) {
      return KiiGroup.groupWithNameAndMembers(groupName, null);
    };

    /** Creates a reference to a group with the given name and a list of default members
    @param {String} groupName An application-specific group name
    @param {Array} members An array of KiiUser objects to add to the group
    @returns {KiiGroup} A new KiiGroup reference
    @example
    var group = new KiiGroup.groupWithName("myGroup", members);
    */


    KiiGroup.groupWithNameAndMembers = function(groupName, members) {
      var group;
      group = new KiiGroup();
      group.name = groupName;
      group._addMembers = members;
      return group;
    };

    /** Generate a new KiiGroup based on a given URI
    @param {String} uri The URI of the group to be represented
    @returns {KiiGroup} A new KiiGroup with its parameters filled in from the URI
    @example
    var group = new KiiGroup.groupWithURI("kiicloud://myuri");
    */


    KiiGroup.groupWithURI = function(uri) {
      var compLength, components, group, newURI;
      group = null;
      newURI = uri.substr("kiicloud://".length);
      components = newURI.split("/");
      compLength = components.length;
      if (compLength > 0) {
        group = new KiiGroup();
        group.uuid = components[compLength - 1];
      } else {
        Kii.error("Invalid URI: " + uri);
      }
      return group;
    };

    KiiGroup.groupWithID = function(id) {
      var group;
      group = new KiiGroup();
      group.uuid = id;
      return group;
    };

    KiiGroup.groupWithJSON = function(json) {
      var group;
      group = new KiiGroup();
      if (json.groupID != null) {
        group.uuid = json.groupID;
      }
      if (json.name != null) {
        group.name = json.name;
      }
      if (json.owner != null) {
        group.owner = KiiUser.userWithID(json.owner);
      }
      return group;
    };

    return KiiGroup;

  }).call(this);

  /**
      @class Represents a KiiObject object
      @exports root.KiiObject as KiiObject
  */


  root.KiiObject = (function() {
    var _thisObject;

    _thisObject = null;

    KiiObject.prototype._className = "KiiObject";

    KiiObject.prototype._alteredFields = [];

    KiiObject.prototype.bucket = null;

    KiiObject.prototype.customInfo = null;

    /** The UUID of the given group, assigned by the server
    @type String
    */


    KiiObject.prototype.uuid = null;

    /** The created date of the given object, assigned by the server 
    @type Date
    */


    KiiObject.prototype.created = null;

    /** The modified date of the given object, assigned by the server 
    @type Date
    */


    KiiObject.prototype.modified = null;

    /** The application-defined type name of the object
    @type String
    */


    KiiObject.prototype.type = null;

    function KiiObject() {
      this["delete"] = __bind(this["delete"], this);

      this.refresh = __bind(this.refresh, this);

      this.save = __bind(this.save, this);

      this.saveAllFields = __bind(this.saveAllFields, this);

      this._performSave = __bind(this._performSave, this);

      this._updateWithJSON = __bind(this._updateWithJSON, this);

      this.objectURI = __bind(this.objectURI, this);

      this.objectACL = __bind(this.objectACL, this);

      this.get = __bind(this.get, this);

      this.set = __bind(this.set, this);
      this.customInfo = {};
    }

    /** Sets a key/value pair to a KiiObject
    
    <br><br>If the key already exists, its value will be written over. If the object is of invalid type, it will return false and a KiiError will be thrown (quietly). Accepted types are any JSON-encodable objects.
    @param {String} key The key to set. The key must not be a system key (created, metadata, modified, type, uuid) or begin with an underscore (_)
    @param {Object} value The value to be set. Object must be of a JSON-encodable type (Ex: dictionary, array, string, number, etc)
    @example 
    var obj = . . .; // a KiiObject
    obj.set("score", 4298);
    */


    KiiObject.prototype.set = function(key, value) {
      this.customInfo[key] = value;
      return this._alteredFields.push(key);
    };

    /** Gets the value associated with the given key
    @param {String} key The key to retrieve
    @returns {Object} The object associated with the key. null if none exists
    @example 
    var obj = . . .; // a KiiObject
    var score = obj.get("score");
    */


    KiiObject.prototype.get = function(key) {
      return this.customInfo[key];
    };

    /** Get the ACL handle for this file
    
    <br><br>Any KiiACLEntry objects added or revoked from this ACL object will be appended to/removed from the server on ACL save. 
    	@returns {KiiACL} A KiiACL object associated with this KiiObject
    	@example 
    	var obj = . . .; // a KiiObject
    	var acl = obj.objectACL();
    */


    KiiObject.prototype.objectACL = function() {
      return KiiACL.aclWithParent(this);
    };

    /** Get a specifically formatted string referencing the object
    
    <br><br>The object must exist in the cloud (have a valid UUID).
    @returns {String} A URI string based on the current object. null if a URI couldn't be generated.
    @example 
    var obj = . . .; // a KiiObject
    var uri = obj.objectURI();
    */


    KiiObject.prototype.objectURI = function() {
      var base, uri;
      base = "kiicloud://";
      if ((this.bucket != null) && (this.uuid != null)) {
        uri = base;
        if (this.bucket.group != null) {
          uri += "groups/" + this.bucket.group.uuid;
        } else if (this.bucket.user != null) {
          uri += "users/" + this.bucket.user.uuid;
        }
        uri += "/buckets/" + this.bucket.name + "/objects/" + this.uuid;
      }
      return uri;
    };

    KiiObject.prototype._updateWithJSON = function(json) {
      var key, val, _results;
      _results = [];
      for (key in json) {
        val = json[key];
        if (key === "objectID" || key === "_id" || key === "uuid") {
          Kii.logger("Setting uuid: " + val);
          _results.push(this.uuid = val);
        } else if (key === "createdAt" || key === "_created" || key === "created") {
          _results.push(this.created = val);
        } else if (key === "modifiedAt" || key === "_modified" || key === "modified") {
          _results.push(this.modified = val);
        } else if (key === "_owner") {
          _results.push(this.owner = KiiUser.userWithID(val));
        } else if (key === "_dataType") {
          _results.push(this.type = val);
        } else if (key[0] !== "_") {
          _results.push(this.customInfo[key] = val);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    KiiObject.prototype._performSave = function(allFields, callbacks) {
      var key, path, request, saveCallbacks, _i, _len, _ref,
        _this = this;
      _thisObject = this;
      if (this.bucket.user != null) {
        path = "/users/" + this.bucket.user.uuid + "/buckets/" + this.bucket.name + "/objects/";
      } else if (this.bucket.group != null) {
        path = "/groups/" + this.bucket.group.uuid + "/buckets/" + this.bucket.name + "/objects/";
      } else {
        path = "/buckets/" + this.bucket.name + "/objects/";
      }
      if (this.uuid != null) {
        path += this.uuid;
      }
      request = new KiiRequest(path, true);
      request.method = this.uuid != null ? "PUT" : "POST";
      if (allFields) {
        request.data = this.customInfo;
      } else {
        request.data = {};
        _ref = this._alteredFields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          request.data[key] = this.customInfo[key];
        }
      }
      if (this.type != null) {
        request.contentType = "application/vnd." + (Kii.getAppID()) + "." + this.type + "+json";
      }
      if ((this.uuid != null) && !allFields) {
        request.headers["X-HTTP-Method-Override"] = "PATCH";
      }
      saveCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            _thisObject._updateWithJSON(data);
            _thisObject._alteredFields = [];
            if (callbacks != null) {
              return callbacks.success(_thisObject);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_thisObject, "Unable to parse response");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisObject, error);
          }
        }
      };
      return request.execute(saveCallbacks, false);
    };

    /** Saves the latest object values to the server
    
    <br><br>If the object does not yet exist, it will be created. If the object already exists, all fields will be removed or changed to match the local values. 
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful save request
    @param {Method} callbacks.failure The callback method to call on a failed save request
    @example 
    var obj = . . .; // a KiiObject
    obj.saveAllFields({
        success: function(theSavedObject) {
            // do something with the saved object
        },
        
        failure: function(theObject, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiObject.prototype.saveAllFields = function(callbacks) {
      return this._performSave(true, callbacks);
    };

    /** Saves the latest object values to the server
    
    <br><br>If the object does not yet exist, it will be created. If the object already exists, the fields that have changed will be updated accordingly.
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful save request
    @param {Method} callbacks.failure The callback method to call on a failed save request
    @example 
    var obj = . . .; // a KiiObject
    obj.save({
        success: function(theSavedObject) {
            // do something with the saved object
        },
        
        failure: function(theObject, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiObject.prototype.save = function(callbacks) {
      return this._performSave(false, callbacks);
    };

    /** Updates the local object's data with the user data on the server
    
    <br><br>The object must exist on the server. Local data will be overwritten.    	
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful refresh request
    @param {Method} callbacks.failure The callback method to call on a failed refresh request
    @example 
    var obj = . . .; // a KiiObject
    obj.refresh({
        success: function(theRefreshedObject) {
            // do something with the refreshed object
        },
    
        failure: function(theObject, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiObject.prototype.refresh = function(callbacks) {
      var path, refreshCallbacks, request,
        _this = this;
      _thisObject = this;
      if (this.bucket.user != null) {
        path = "/users/" + this.bucket.user.uuid + "/buckets/" + this.bucket.name + "/objects/";
      } else if (this.bucket.group != null) {
        path = "/groups/" + this.bucket.group.uuid + "/buckets/" + this.bucket.name + "/objects/";
      } else {
        path = "/buckets/" + this.bucket.name + "/objects/";
      }
      path += this.uuid;
      request = new KiiRequest(path, true);
      refreshCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            _thisObject._updateWithJSON(data);
            if (callbacks != null) {
              return callbacks.success(_thisObject);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_thisObject, "Unable to parse response");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisObject, error);
          }
        }
      };
      return request.execute(refreshCallbacks, false);
    };

    /** Delete the object from the server
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful delete request
    @param {Method} callbacks.failure The callback method to call on a failed delete request
    @example 
    var obj = . . .; // a KiiObject
    obj.delete({
        success: function(theDeletedObject) {
            // do something
        },
        
        failure: function(theObject, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiObject.prototype["delete"] = function(callbacks) {
      var path, refreshCallbacks, request,
        _this = this;
      _thisObject = this;
      if (this.bucket.user != null) {
        path = "/users/" + this.bucket.user.uuid + "/buckets/" + this.bucket.name + "/objects/";
      } else if (this.bucket.group != null) {
        path = "/groups/" + this.bucket.group.uuid + "/buckets/" + this.bucket.name + "/objects/";
      } else {
        path = "/buckets/" + this.bucket.name + "/objects/";
      }
      path += this.uuid;
      request = new KiiRequest(path, true);
      request.method = "DELETE";
      refreshCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success(_thisObject);
          } else if (callbacks != null) {
            return callbacks.failure(_thisObject, "Unable to parse response");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisObject, error);
          }
        }
      };
      return request.execute(refreshCallbacks, true);
    };

    KiiObject.objectWithBucket = function(bucket, type) {
      var obj;
      Kii.logger("Creating object w type: " + type);
      obj = new KiiObject;
      obj.bucket = bucket;
      obj.type = type;
      Kii.logger(obj);
      return obj;
    };

    /** Generate a new KiiObject based on a given URI
    @param {String} uri The URI of the object to be represented
    @returns {KiiObject} A new KiiObject with its parameters filled in from the URI
    @example
    var group = new KiiObject.objectWithURI("kiicloud://myuri");
    */


    KiiObject.objectWithURI = function(uri) {
      var bucket, bucketIndex, bucketName, compLength, components, group, newURI, obj, user;
      newURI = uri.substr("kiicloud://".length);
      components = newURI.split("/");
      compLength = components.length;
      Kii.logger(components);
      if (compLength >= 4) {
        bucketIndex = compLength === 4 ? 1 : 3;
        bucketName = components[bucketIndex];
        if (components[0] === "groups") {
          group = new KiiGroup.groupWithID(components[1]);
        } else if (components[0] === "users") {
          user = new KiiUser.userWithID(components[1]);
        }
        bucket = new KiiBucket.bucketWithName(bucketName, (group != null ? group : user));
        Kii.logger(bucket);
        obj = bucket.createObject();
        obj.uuid = components[compLength - 1];
        Kii.logger(obj);
      } else {
        Kii.error("Invalid URI: " + uri);
      }
      return obj;
    };

    return KiiObject;

  }).call(this);

  /**
      @class Represents a KiiQuery object
      @exports root.KiiQuery as KiiQuery
  */


  root.KiiQuery = (function() {
    var _clause, _cursor, _limit, _sortString;

    function KiiQuery() {
      this.setLimit = __bind(this.setLimit, this);

      this.getLimit = __bind(this.getLimit, this);

      this.dictValue = __bind(this.dictValue, this);

      this.sortByAsc = __bind(this.sortByAsc, this);

      this.sortByDesc = __bind(this.sortByDesc, this);

    }

    KiiQuery.prototype._className = "KiiQuery";

    _sortString = null;

    _cursor = null;

    KiiQuery.prototype.sortDescending = false;

    KiiQuery.prototype.sortField = null;

    _limit = 25;

    _clause = null;

    /** Set the query to sort by a field in descending order
    
    If a sort has already been set, it will be overwritten.
    @param {String} field The key that should be used to sort
    */


    KiiQuery.prototype.sortByDesc = function(sortField) {
      this.sortField = sortField;
      return this.sortDescending = true;
    };

    /** Set the query to sort by a field in ascending order
    
    If a sort has already been set, it will be overwritten.
    @param {String} field The key that should be used to sort
    */


    KiiQuery.prototype.sortByAsc = function(sortField) {
      this.sortField = sortField;
      return this.sortDescending = false;
    };

    KiiQuery.emptyDictValue = function() {
      return {
        type: "all"
      };
    };

    KiiQuery.prototype.dictValue = function() {
      var data;
      data = {
        numberOfResults: _limit,
        descending: this.sortDescending
      };
      if (this._clause != null) {
        data.clause = this._clause.getDictValue();
      } else {
        data.clause = KiiQuery.emptyDictValue();
      }
      if (this.sortField != null) {
        data.orderBy = this.sortField;
      }
      return data;
    };

    KiiQuery.queryWithClause = function(clause) {
      var query;
      query = new KiiQuery();
      query._clause = clause;
      return query;
    };

    KiiQuery.prototype.getLimit = function() {
      return this._limit;
    };

    KiiQuery.prototype.setLimit = function(value) {
      if (value > 0) {
        return this._limit = value;
      } else {
        return Kii.error("Unable to set a limit <= 0");
      }
    };

    return KiiQuery;

  }).call(this);

  /**
      @class Represents a KiiClause expression object
      @exports root.KiiClause as KiiClause
  */


  root.KiiClause = (function() {
    var _dictExpression, _whereClauses, _whereType;

    function KiiClause() {
      this.getDictValue = __bind(this.getDictValue, this);

      this.setDictValue = __bind(this.setDictValue, this);

    }

    KiiClause.prototype._className = "KiiClause";

    _dictExpression = {};

    _whereType = null;

    _whereClauses = [];

    KiiClause.prototype.setDictValue = function(_dictExpression) {
      this._dictExpression = _dictExpression;
    };

    KiiClause.prototype.getDictValue = function() {
      var clause, clauses, retDict, _i, _len, _ref;
      retDict = {};
      if ((this._whereClauses != null) && (this._whereType != null)) {
        clauses = [];
        if (this._whereClauses.length === 1) {
          clause = this._whereClauses[0];
          if (this._whereType === "not") {
            retDict = {
              "type": this._whereType,
              "clause": clause.getDictValue()
            };
          } else {
            retDict = clause.getDictValue();
          }
        } else {
          _ref = this._whereClauses;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            clause = _ref[_i];
            clauses.push(clause.getDictValue());
          }
          retDict = {
            "type": this._whereType,
            "clauses": clauses
          };
        }
      } else if (this._whereClauses != null) {
        if (this._whereClauses.length > 0) {
          retDict = this._whereClauses[0].getDictValue();
        }
      } else if (this._dictExpression != null) {
        retDict = this._dictExpression;
      }
      if (!(retDict != null)) {
        retDict = KiiQuery.emptyDictValue();
      }
      return retDict;
    };

    KiiClause.createWithWhere = function(whereType, whereClauses) {
      var expression;
      expression = new KiiClause();
      expression._whereType = whereType;
      expression._whereClauses = whereClauses;
      return expression;
    };

    KiiClause.create = function(operator, key, value) {
      var expression, _dict;
      expression = new KiiClause();
      _dict = {};
      if (operator === "=") {
        _dict.type = "eq";
        _dict.field = key;
        _dict.value = value;
      } else if (operator === "<") {
        _dict.type = "range";
        _dict.field = key;
        _dict.upperLimit = value;
        _dict.upperIncluded = false;
      } else if (operator === "<=") {
        _dict.type = "range";
        _dict.field = key;
        _dict.upperLimit = value;
        _dict.upperIncluded = true;
      } else if (operator === ">") {
        _dict.type = "range";
        _dict.field = key;
        _dict.lowerLimit = value;
        _dict.lowerIncluded = false;
      } else if (operator === ">=") {
        _dict.type = "range";
        _dict.field = key;
        _dict.lowerLimit = value;
        _dict.lowerIncluded = true;
      } else if (operator === "in") {
        _dict.type = "in";
        _dict.field = key;
        _dict.values = value;
      } else if (operator === "prefix") {
        _dict.type = "prefix";
        _dict.field = key;
        _dict.prefix = value;
      }
      expression.setDictValue(_dict);
      return expression;
    };

    /** Create a KiiClause with the AND operator concatenating multiple KiiClause objects
    @param {List} A variable-length list of KiiClause objects to concatenate
    @example
    KiiClause clause = KiiClause.and(clause1, clause2, clause3, . . .)
    */


    KiiClause.and = function() {
      return KiiClause.createWithWhere("and", arguments);
    };

    /** Create a KiiClause with the OR operator concatenating multiple KiiClause objects
    @param {List} A variable-length list of KiiClause objects to concatenate
    @example
    KiiClause clause = KiiClause.or(clause1, clause2, clause3, . . .)
    */


    KiiClause.or = function() {
      return KiiClause.createWithWhere("or", arguments);
    };

    /** Create an expression of the form (key == value)
    @param {String} key The key to compare
    @param {Object} value the value to compare
    */


    KiiClause.equals = function(key, value) {
      if (value._className != null) {
        value = value.objectURI;
      }
      return KiiClause.create("=", key, value);
    };

    /** Create an expression of the form (key != value)
    @param {String} key The key to compare
    @param {Object} value the value to compare
    */


    KiiClause.notEquals = function(key, value) {
      if (value._className != null) {
        value = value.objectURI;
      }
      return KiiClause.createWithWhere("not", [KiiClause.equals(key, value)]);
    };

    /** Create an expression of the form (key > value)
    @param {String} key The key to compare
    @param {Object} value the value to compare
    */


    KiiClause.greaterThan = function(key, value) {
      return KiiClause.create(">", key, value);
    };

    /** Create an expression of the form (key >= value)
    @param {String} key The key to compare
    @param {Object} value the value to compare
    */


    KiiClause.greaterThanOrEqual = function(key, value) {
      return KiiClause.create(">=", key, value);
    };

    /** Create an expression of the form (key < value)
    @param {String} key The key to compare
    @param {Object} value the value to compare
    */


    KiiClause.lessThan = function(key, value) {
      return KiiClause.create("<", key, value);
    };

    /** Create an expression of the form (key <= value)
    @param {String} key The key to compare
    @param {Object} value the value to compare
    */


    KiiClause.lessThanOrEqual = function(key, value) {
      return KiiClause.create("<=", key, value);
    };

    /** Create an expression of the form (key in values)
    @param {String} key The key to compare
    @param {Object} value the value to compare
    */


    KiiClause["in"] = function(key, values) {
      return KiiClause.create("in", key, values);
    };

    /** Create an expression of the form (key STARTS WITH value)
    @param {String} key The key to compare
    @param {Object} value the value to compare
    */


    KiiClause.startsWith = function(key, value) {
      return KiiClause.create("prefix", key, value);
    };

    return KiiClause;

  }).call(this);

  KiiRequest = (function() {
    var _thisRequest;

    _thisRequest = null;

    function KiiRequest(path, withApp) {
      this.execute = __bind(this.execute, this);

      var _this = this;
      _thisRequest = this;
      this.path = withApp ? "/apps/" + (Kii.getAppID()) + path : path;
      this.method = "GET";
      this.headers = {
        "user-agent": "js/1.0",
        "accept": "*/*"
      };
      this.data = null;
      this.contentType = "application/json";
      this.anonymous = false;
      this.accept = null;
      this.success = function() {};
      this.failure = function() {};
    }

    KiiRequest.prototype.execute = function(callbacks, ignoreBody) {
      var ajaxData, json_text, url,
        _this = this;
      this.success = callbacks.success != null ? callbacks.success : this.success;
      this.failure = callbacks.failure != null ? callbacks.failure : this.failure;
      url = Kii.getBaseURL() + this.path;
      json_text = JSON.stringify(this.data);
      Kii.logger("Making request[" + this.method + "] to " + url + " with data: " + json_text);
      this.headers['x-kii-appid'] = Kii.getAppID();
      this.headers['x-kii-appkey'] = Kii.getAppKey();
      if (this.accept != null) {
        this.headers['accept'] = this.accept;
      }
      if (!this.anonymous) {
        this.headers['Authorization'] = "Bearer " + (KiiUser.getCurrentUser().accessToken);
      }
      Kii.logger("Headers: ");
      Kii.logger(this.headers);
      ajaxData = {
        type: this.method,
        url: url,
        dataType: "json",
        headers: this.headers,
        contentType: this.contentType,
        error: function(xhr, status, error) {
          var errString, json;
          errString = error;
          json = jQuery.parseJSON(xhr.responseText);
          if (json != null) {
            if (json.errorCode != null) {
              errString = json.errorCode;
              if (json.message != null) {
                errString += ": " + json.message;
              }
            }
          }
          Kii.logger("Failure: " + errString);
          Kii.logger(xhr.responseText);
          return _thisRequest.failure(errString, xhr.status);
        },
        complete: function(xhr, status) {
          var errString, json;
          Kii.logger("Completed Request[" + xhr.status + "]");
          Kii.logger(xhr.responseText);
          json = jQuery.parseJSON(xhr.responseText);
          if (json != null) {
            if (json.errorCode != null) {
              errString = json.errorCode;
              if (json.message != null) {
                errString += ": " + json.message;
              }
              return _thisRequest.failure(errString, xhr.status, json.errorCode);
            } else {
              return _thisRequest.success(json, xhr.status);
            }
          } else if (ignoreBody) {
            return _thisRequest.success(null, xhr.status);
          } else {
            return Kii.error("Unable to parse server response. HTTP Status: " + xhr.status + " HTTP Body: " + xhr.responseText);
          }
        }
      };
      if (this.method !== "GET" && (json_text != null)) {
        ajaxData.headers['content-length'] = json_text.length;
        ajaxData.data = json_text;
        ajaxData.processData = false;
      }
      return $.ajax(ajaxData);
    };

    return KiiRequest;

  })();

  /**
      @class Represents a KiiUser object
      @exports root.KiiUser as KiiUser
  */


  root.KiiUser = (function() {
    var _displayName, _email, _password, _phoneNumber, _thisUser, _username,
      _this = this;

    function KiiUser() {
      this._updateWithJSON = __bind(this._updateWithJSON, this);

      this["delete"] = __bind(this["delete"], this);

      this.refresh = __bind(this.refresh, this);

      this.save = __bind(this.save, this);

      this.changeEmail = __bind(this.changeEmail, this);

      this.changePhone = __bind(this.changePhone, this);

      this.memberOfGroups = __bind(this.memberOfGroups, this);

      this.resendPhoneNumberVerification = __bind(this.resendPhoneNumberVerification, this);

      this.resendEmailVerification = __bind(this.resendEmailVerification, this);

      this.resendVerification = __bind(this.resendVerification, this);

      this.verifyPhoneNumber = __bind(this.verifyPhoneNumber, this);

      this.verifyEmailAddress = __bind(this.verifyEmailAddress, this);

      this.verifyCredentials = __bind(this.verifyCredentials, this);

      this.updatePassword = __bind(this.updatePassword, this);

      this.register = __bind(this.register, this);

      this._authenticateWithToken = __bind(this._authenticateWithToken, this);

      this._authenticate = __bind(this._authenticate, this);

      this.bucketWithName = __bind(this.bucketWithName, this);

      this.get = __bind(this.get, this);

      this.set = __bind(this.set, this);

      this.objectURI = __bind(this.objectURI, this);

    }

    _thisUser = null;

    _username = null;

    _displayName = null;

    _password = null;

    _email = null;

    _phoneNumber = null;

    KiiUser.prototype._className = "KiiUser";

    KiiUser.prototype._customInfo = {};

    /** The UUID of the given user, assigned by the server
    @type String
    */


    KiiUser.prototype.uuid = null;

    /** The username to use for authentication or for display. Must be between 4-64 alphanumeric characters, must start with a letter.
    @type String
    @throws {InvalidUsernameException} If the username is not a valid format
    */


    KiiUser.prototype.__defineGetter__("username", function() {
      return KiiUser._username;
    });

    KiiUser.prototype.__defineSetter__("username", function(value) {
      var pattern;
      console.log("Setting username: " + value);
      pattern = /[A-Za-z]{1}[A-Za-z0-9-_]{3,63}/i;
      if ((typeof value).toLowerCase() !== "string") {
        throw new InvalidUsernameException;
      } else if (value.match(pattern)) {
        return KiiUser._username = value;
      } else {
        throw new InvalidUsernameException;
      }
    });

    /** Display name for this user. Cannot be used for logging a user in; is non-unique. Must be between 4-50 alphanumeric characters, must start with a letter.
    
    @type String
    @throws {InvalidDisplayNameException} If the displayName is not a valid format
    */


    KiiUser.prototype.__defineGetter__("displayName", function() {
      Kii.logger("Getting Displayname: " + KiiUser._displayName);
      return KiiUser._displayName;
    });

    KiiUser.prototype.__defineSetter__("displayName", function(value) {
      var pattern;
      Kii.logger("Setting displayName: " + value);
      pattern = /[A-Za-z]{1}[A-Za-z0-9-_]{3,49}/i;
      if ((typeof value).toLowerCase() !== "string") {
        throw new InvalidDisplayNameException;
      } else if (value.match(pattern)) {
        Kii.logger("Set displayName: " + value);
        return KiiUser._displayName = value;
      } else {
        throw new InvalidDisplayNameException;
      }
    });

    /** The password of the given user. Must be at least 4 characters, made up of alphanumeric and/or: @,#,$,%,^,&
    @type String
    @throws {InvalidPasswordException} If the password is not a valid format
    */


    KiiUser.prototype.__defineGetter__("password", function() {
      return KiiUser._password;
    });

    KiiUser.prototype.__defineSetter__("password", function(value) {
      var pattern;
      pattern = /[A-Za-z0-9\\@\\#\\$\\%\\^\\&]{4,}/i;
      if ((typeof value).toLowerCase() !== "string") {
        console.log("Not a string");
        throw new InvalidPasswordException;
      } else if (value.match(pattern)) {
        console.log("Matched");
        return KiiUser._password = value;
      } else {
        console.log("Wasn't Matched");
        throw new InvalidPasswordException;
      }
    });

    KiiUser._validateEmail = function(value) {
      var pattern;
      value = $.trim(value);
      pattern = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$/i;
      if ((typeof value).toLowerCase() !== "string") {
        Kii.logger("Not string");
        return false;
      } else if (value.match(pattern)) {
        return true;
      } else {
        return false;
      }
    };

    /** Email address to use for authentication or for display
    @type String
    @throws {InvalidEmailException} If the email address is not a valid format
    */


    KiiUser.prototype.__defineGetter__("email", function() {
      return KiiUser._email;
    });

    KiiUser.prototype.__defineSetter__("email", function(value) {
      if (KiiUser._validateEmail(value)) {
        return KiiUser._email = $.trim(value);
      } else {
        throw new InvalidEmailException;
      }
    });

    /** Phone number to use for authentication or for display. Must begin with a '+' and be at least 10 digits.
    @type String
    @throws {InvalidPhoneException} If the phone number is not a valid format
    */


    KiiUser.prototype.__defineGetter__("phoneNumber", function() {
      return KiiUser._phoneNumber;
    });

    KiiUser.prototype.__defineSetter__("phoneNumber", function(value) {
      var pattern;
      pattern = /[\\+]+[0-9]{10,}/i;
      if ((typeof value).toLowerCase() !== "string") {
        throw new InvalidPhoneNumberException;
      } else if (value.match(pattern)) {
        return KiiUser._phoneNumber = value;
      } else {
        throw new InvalidPhoneNumberException;
      }
    });

    /** The country code associated with this user
    @type String
    */


    KiiUser.prototype.country = null;

    /** The created date of the given user, assigned by the server 
    @type Date
    */


    KiiUser.prototype.created = null;

    /** The modified date of the given user, assigned by the server 
    @type Date
    */


    KiiUser.prototype.modified = null;

    /** true if the user's email address has been verified by the user, false otherwise. This field is assigned by the server
    @type Boolean
    */


    KiiUser.prototype.emailVerified = false;

    /** true if the user's phone number has been verified by the user, false otherwise. This field is assigned by the server
    @type Boolean
    */


    KiiUser.prototype.phoneVerified = false;

    /** The access token for the user - only available if the user is currently logged in.
    @type String
    */


    KiiUser.prototype.accessToken = null;

    /** Get a specifically formatted string referencing the user
    
    <br><br>The user must exist in the cloud (have a valid UUID).
    @returns {String} A URI string based on the given user. null if a URI couldn't be generated.
    @example 
    var user = . . .; // a KiiUser
    var uri = user.objectURI();
    */


    KiiUser.prototype.objectURI = function() {
      var uri;
      if (this.uuid != null) {
        uri = "kiicloud://users/" + this.uuid;
      }
      return uri;
    };

    /** Sets a key/value pair to a KiiUser
    
    <br><br>If the key already exists, its value will be written over. If the object is of invalid type, it will return false and a KiiError will be thrown (quietly). Accepted types are any JSON-encodable objects.
    @param {String} key The key to set. The key must not be a system key (created, metadata, modified, type, uuid) or begin with an underscore (_)
    @param {Object} value The value to be set. Object must be of a JSON-encodable type (Ex: dictionary, array, string, number, etc)
    @example 
    var user = . . .; // a KiiUser
    user.set("score", 4298);
    */


    KiiUser.prototype.set = function(key, value) {
      Kii.logger(this);
      Kii.logger(this._customInfo);
      return this._customInfo[key] = value;
    };

    /** Gets the value associated with the given key
    @param {String} key The key to retrieve
    @returns {Object} The object associated with the key. null if none exists
    @example 
    var user = . . .; // a KiiUser
    var score = user.get("score");
    */


    KiiUser.prototype.get = function(key) {
      return this._customInfo[key];
    };

    /**
        The currently authenticated user
        
        @returns {KiiUser}
        @example
        var user = KiiUser.getCurrentUser();
    */


    KiiUser.getCurrentUser = function() {
      return Kii.getCurrentUser();
    };

    /** Create a user object with credentials pre-filled
    
    <br><br>Creates an pre-filled user object for manipulation. This user will not be authenticated until one of the authentication methods are called on it. It can be treated as any other KiiObject before it is authenticated.
    @param username The user's desired username. Must be between 4-64 alphanumeric characters, must start with a letter.
    @param password The user's password
    @returns a working KiiUser object
    @example 
    var user = KiiUser.userWithUsername("myusername", "mypassword");
    */


    KiiUser.userWithUsername = function(username, password) {
      var user;
      user = new KiiUser();
      user.username = username;
      user.password = password;
      return user;
    };

    /** Create a user object with credentials pre-filled
    
    <br><br>Creates an pre-filled user object for manipulation. This user will not be authenticated until one of the authentication methods are called on it. It can be treated as any other KiiCoreObject before it is authenticated. This method should only be used for authentication, as registration requires a username. This method can be used once the user's phone number has been verified.
    @param phoneNumber The user's verified phone number
    @param password The user's password
    @returns a working KiiUser object
    @example 
    var user = KiiUser.userWithPhoneNumber("15559847589", "mypassword");
    */


    KiiUser.userWithPhoneNumber = function(phoneNumber, password) {
      var user;
      user = new KiiUser();
      user.phoneNumber = phoneNumber;
      user.password = password;
      return user;
    };

    /** Generate a new KiiUser based on a given URI
    @param {String} uri The URI of the object to be represented 
    @returns {KiiUser} A new KiiUser with its parameters filled in from the URI
    @example
    var user = new KiiUser.userWithURI("kiicloud://myuri");
    */


    KiiUser.userWithURI = function(uri) {
      var compLength, components, newURI, user;
      newURI = uri.substr("kiicloud://".length);
      components = newURI.split("/");
      compLength = components.length;
      if (compLength > 0) {
        user = new KiiUser();
        user.uuid = components[compLength - 1];
        Kii.logger(user);
      } else {
        Kii.error("Invalid URI: " + uri);
      }
      return user;
    };

    KiiUser.userWithID = function(id) {
      var user;
      user = new KiiUser();
      user.uuid = id;
      return user;
    };

    /** Creates a reference to a bucket for this user
    
    <br><br>The bucket will be created/accessed within this user's scope
    @param {String} bucketName The name of the bucket the user should create/access
    @returns {KiiBucket} A working KiiBucket object
    @example 
    var user = . . .; // a KiiUser
    var bucket = user.bucketWithName("myBucket");
    */


    KiiUser.prototype.bucketWithName = function(bucketName) {
      return new KiiBucket.bucketWithName(bucketName, this);
    };

    KiiUser.prototype._authenticate = function(callbacks) {
      var authCallbacks, request,
        _this = this;
      _thisUser = this;
      Kii.logger("Authenticating user " + this);
      Kii.logger(callbacks);
      request = new KiiRequest("/oauth2/token", false);
      request.anonymous = true;
      request.method = "POST";
      request.data = {
        username: this.username,
        password: this.password
      };
      authCallbacks = {
        success: function(data) {
          _thisUser.uuid = data.id;
          _thisUser.accessToken = data.access_token;
          Kii.setCurrentUser(_thisUser);
          if (callbacks != null) {
            return callbacks.success(Kii.getCurrentUser());
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(authCallbacks, false);
    };

    KiiUser.prototype._authenticateWithToken = function(token, callbacks) {
      var authCallbacks, request,
        _this = this;
      _thisUser = this;
      Kii.logger("Authenticating user " + this);
      Kii.logger(callbacks);
      request = new KiiRequest("/users/me", true);
      request.anonymous = true;
      request.method = "GET";
      request.headers = {
        Authorization: "Bearer " + token
      };
      authCallbacks = {
        success: function(data) {
          _thisUser._updateWithJSON(data);
          _thisUser.accessToken = token;
          Kii.setCurrentUser(_thisUser);
          if (callbacks != null) {
            return callbacks.success(Kii.getCurrentUser());
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(authCallbacks, false);
    };

    /** Authenticates a user with the server
    
    <br><br>The user object must have an associated email/password combination.
    @param {String} userIdentifier Can be a username or a verified phone number or a verified email address
    @param {String} password The password of the user to authenticate
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful authentication request
    @param {Method} callbacks.failure The callback method to call on a failed authentication request
    @example 
    var user = KiiUser.userWithUsername("myusername", "mypassword");
    user.authenticate({
        success: function(theAuthedUser) {
            // do something with the authenticated user
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.authenticate = function(userIdentifier, password, callbacks) {
      var user;
      user = KiiUser.userWithUsername(userIdentifier, password);
      return user._authenticate(callbacks);
    };

    /** Asynchronously authenticates a user with the server using a valid access token
    
    Authenticates a user with the server. This method is non-blocking.
    @param {String} accessToken A valid access token associated with the desired user
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful authentication request
    @param {Method} callbacks.failure The callback method to call on a failed authentication request
    @example
    KiiUser.authenticateWithToken("mytoken", {
        success: function(theAuthedUser) {
            // do something with the authenticated user
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.authenticateWithToken = function(token, callbacks) {
      var user;
      user = new KiiUser();
      return user._authenticateWithToken(token, callbacks);
    };

    /** Registers a user with the server
    
    <br><br>The user object must have an associated email/password combination.
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful registration request
    @param {Method} callbacks.failure The callback method to call on a failed registration request
    @example 
    var user = KiiUser.userWithUsername("myusername", "mypassword");
    user.register({
        success: function(theAuthedUser) {
            // do something with the authenticated user
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.register = function(callbacks) {
      var data, key, registrationCallbacks, request, value, _ref,
        _this = this;
      _thisUser = this;
      Kii.logger("Registering user " + this);
      data = {
        loginName: this.username,
        displayName: this.username,
        password: this.password
      };
      if (this.displayName != null) {
        data.displayName = this.displayName;
      }
      if (this.email != null) {
        data.email = this.email;
      }
      if (this.phoneNumber != null) {
        data.phoneNumber = this.phoneNumber;
      }
      if (this.country != null) {
        data.country = this.country;
      }
      Kii.logger("CINFO");
      Kii.logger(this._customInfo);
      _ref = this._customInfo;
      for (key in _ref) {
        value = _ref[key];
        Kii.logger("Key/val: " + key + "/" + value);
        data[key] = value;
      }
      request = new KiiRequest("/users", true);
      request.method = "POST";
      request.data = data;
      request.anonymous = true;
      request.contentType = "application/vnd.kii.RegistrationRequest+json";
      registrationCallbacks = {
        success: function(data) {
          return _thisUser._authenticate(callbacks);
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(registrationCallbacks, false);
    };

    /** Update a user's password on the server
    
    <br><br>Update a user's password with the server. The fromPassword must be equal to the current password associated with the account in order to succeed.
    @param {String} fromPassword The user's current password
    @param {String} toPassword The user's desired password
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful update password request
    @param {Method} callbacks.failure The callback method to call on a failed update password request
    @example 
    var user = Kii.currentUser();
    user.updatePassword("oldpassword", "newpassword", {
        success: function(theUser) {
            // do something
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.updatePassword = function(fromPassword, toPassword, callbacks) {
      var data, path, request, updateCallbacks,
        _this = this;
      _thisUser = this;
      Kii.logger("Updating password from " + fromPassword + " to " + toPassword);
      data = {
        oldPassword: fromPassword,
        newPassword: toPassword
      };
      path = "/users/" + this.uuid + "/password";
      request = new KiiRequest(path, true);
      request.method = "PUT";
      request.data = data;
      request.contentType = "application/vnd.kii.ChangePasswordRequest+json";
      updateCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            _thisUser.password = toPassword;
            if (callbacks != null) {
              return callbacks.success(_thisUser);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_thisUser, "Unable to change password");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(updateCallbacks, true);
    };

    KiiUser.prototype.verifyCredentials = function(type, code, callbacks) {
      var path, request, verifyCallbacks,
        _this = this;
      _thisUser = this;
      Kii.logger("Verifying " + type + " with code: " + code);
      path = "/users/me/" + type + "/verify";
      request = new KiiRequest(path, true);
      request.method = "POST";
      request.data = {
        verificationCode: code
      };
      request.contentType = "application/vnd.kii.AddressVerificationRequest+json";
      verifyCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            if (type === "email-address") {
              _thisUser.emailVerified = true;
            } else if (type === "phone-number") {
              _thisUser.phoneVerified = true;
            }
            if (callbacks != null) {
              return callbacks.success(_thisUser);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_thisUser, "Unable to verify " + type);
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(verifyCallbacks, true);
    };

    /** Verify the current user's email address
    
    <br><br>This method is used to verify the email address of the currently logged in user.
    @param {String} verificationCode The code which verifies the currently logged in user
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful verification request
    @param {Method} callbacks.failure The callback method to call on a failed verification request
    @example 
    var user = Kii.currentUser();
    user.verifyEmailAddress("012345", {
        success: function(theUser) {
            // do something
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.verifyEmailAddress = function(verificationCode, callbacks) {
      return this.verifyCredentials("email-address", verificationCode, callbacks);
    };

    /** Verify the current user's phone number
    
    <br><br>This method is used to verify the phone number of the currently logged in user.
    @param {String} verificationCode The code which verifies the currently logged in user
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful verification request
    @param {Method} callbacks.failure The callback method to call on a failed verification request
    @example 
    var user = Kii.currentUser();
    user.verifyPhoneNumber("012345", {
        success: function(theUser) {
            // do something
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.verifyPhoneNumber = function(verificationCode, callbacks) {
      return this.verifyCredentials("phone-number", verificationCode, callbacks);
    };

    KiiUser.prototype.resendVerification = function(type, callbacks) {
      var path, request, resendCallbacks,
        _this = this;
      _thisUser = this;
      Kii.logger("Resending verification " + type);
      path = "/users/me/" + type + "/resend-verification";
      request = new KiiRequest(path, true);
      request.method = "POST";
      resendCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success(_thisUser);
          } else if (callbacks != null) {
            return callbacks.failure(_thisUser, "Unable to resend " + type + " verification");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(resendCallbacks, true);
    };

    /** Resend the email verification code to the user
    
    <br><br>This method will re-send the email verification to the currently logged in user
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful resend request
    @param {Method} callbacks.failure The callback method to call on a failed resend request
    @example 
    var user = Kii.currentUser();
    user.resendEmailVerification({
        success: function(theUser) {
            // do something
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.resendEmailVerification = function(callbacks) {
      return this.resendVerification("email-address", callbacks);
    };

    /** Resend the SMS verification code to the user
    
    <br><br>This method will re-send the SMS verification to the currently logged in user
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful resend request
    @param {Method} callbacks.failure The callback method to call on a failed resend request
    @example 
    var user = Kii.currentUser();
    user.resendPhoneNumberVerification({
        success: function(theUser) {
            // do something
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.resendPhoneNumberVerification = function(callbacks) {
      return this.resendVerification("phone-number", callbacks);
    };

    /** Retrieve a list of groups which the user is a member of
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful resend request
    @param {Method} callbacks.failure The callback method to call on a failed resend request
    @example 
    var user = Kii.currentUser();
    user.memberOfGroups({
        success: function(theUser, groupList) {
            // do something with the results
            for(var i=0; i&lt;groupList.length; i++) {
                var g = groupList[i]; // a KiiGroup object
            }
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.memberOfGroups = function(callbacks) {
      var memberCallbacks, path, request,
        _this = this;
      _thisUser = this;
      Kii.logger("Getting groups for member " + this.uuid);
      path = "/groups/?is_member=" + this.uuid;
      request = new KiiRequest(path, true);
      request.accept = "application/vnd.kii.GroupsRetrievalResponse+json";
      memberCallbacks = {
        success: function(data, statusCode) {
          var group, groupList, _i, _len, _ref;
          if (statusCode < 300 && statusCode >= 200) {
            groupList = [];
            _ref = data.groups;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              group = _ref[_i];
              groupList.push(KiiGroup.groupWithJSON(group));
            }
            if (callbacks != null) {
              return callbacks.success(_thisUser, groupList);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_thisUser, "Unable to retrieve groups");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(memberCallbacks, false);
    };

    /** Updates the user's phone number on the server
    @param {String} newPhoneNumber The new phone number to change to
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful resend request
    @param {Method} callbacks.failure The callback method to call on a failed resend request
    @example 
    var user = Kii.currentUser();
    user.changePhone('+19415551234', {
        success: function(theUser) {
            // do something on success
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.changePhone = function(newPhoneNumber, callbacks) {
      var path, request, updateCallbacks,
        _this = this;
      _thisUser = this;
      Kii.logger("Updating phone number to " + this.phoneNumber);
      path = "/users/" + this.uuid + "/phone-number";
      request = new KiiRequest(path, true);
      request.method = "PUT";
      request.contentType = "application/vnd.kii.PhoneNumberModificationRequest+json";
      request.data = {
        phoneNumber: newPhoneNumber
      };
      updateCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            _thisUser.phoneVerified = false;
            _thisUser.phoneNumber = newPhoneNumber;
            return callbacks.success(_thisUser);
          } else if (callbacks != null) {
            return callbacks.failure(_thisUser, "Unable to update phone number");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(updateCallbacks, true);
    };

    /** Updates the user's email address on the server
    @param {String} newEmail The new email address to change to
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful resend request
    @param {Method} callbacks.failure The callback method to call on a failed resend request
    @example 
    var user = Kii.currentUser();
    user.changeEmail('mynewemail@kii.com', {
        success: function(theUser) {
            // do something on success
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.changeEmail = function(newEmail, callbacks) {
      var path, request, updateCallbacks,
        _this = this;
      _thisUser = this;
      Kii.logger("Updating email address to: " + newEmail);
      if (KiiUser._validateEmail(newEmail)) {
        path = "/users/" + this.uuid + "/email-address";
        request = new KiiRequest(path, true);
        request.method = "PUT";
        request.contentType = "application/vnd.kii.EmailAddressModificationRequest+json";
        request.data = {
          emailAddress: newEmail
        };
        updateCallbacks = {
          success: function(data, statusCode) {
            if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
              _thisUser.emailVerified = false;
              _thisUser.email = newEmail;
              return callbacks.success(_thisUser);
            } else if (callbacks != null) {
              return callbacks.failure(_thisUser, "Unable to update email address");
            }
          },
          failure: function(error, statusCode) {
            if (callbacks != null) {
              return callbacks.failure(_thisUser, error);
            }
          }
        };
        return request.execute(updateCallbacks, true);
      } else {
        return callbacks.failure(_thisUser, "Invalid email address format");
      }
    };

    /** Saves the latest user values to the server
    
    <br><br>If the user does not yet exist, it will NOT be created. Otherwise, the fields that have changed will be updated accordingly.
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful save request
    @param {Method} callbacks.failure The callback method to call on a failed save request
    @example 
    var user = Kii.getCurrentUser(); // a KiiUser
    user.save({
        success: function(theSavedUser) {
            // do something with the saved user
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.save = function(callbacks) {
      var path, request, updateCallbacks,
        _this = this;
      _thisUser = this;
      Kii.logger("Saving user: " + this.uuid);
      path = "/users/" + _thisUser.uuid;
      request = new KiiRequest(path, true);
      request.method = "POST";
      request.contentType = "application/vnd.kii.UserUpdateRequest+json";
      request.data = _thisUser._customInfo;
      if (_thisUser.country != null) {
        request.data.country = _thisUser.country;
      }
      if (_thisUser.displayName != null) {
        request.data.displayName = _thisUser.displayName;
      }
      updateCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            _thisUser.modified = data.modifiedAt;
            if (callbacks != null) {
              return callbacks.success(_thisUser);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_thisUser, "Unable to parse response");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(updateCallbacks, false);
    };

    /** Updates the local user's data with the user data on the server
    
    <br><br>The user must exist on the server. Local data will be overwritten.    	
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful refresh request
    @param {Method} callbacks.failure The callback method to call on a failed refresh request
    @example 
    var user = Kii.getCurrentUser(); // a KiiUser
    user.refresh({
        success: function(theRefreshedUser) {
            // do something with the refreshed user
        },
    
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype.refresh = function(callbacks) {
      var refreshCallbacks, request,
        _this = this;
      _thisUser = this;
      Kii.logger("Refreshing user: " + this.uuid);
      request = new KiiRequest("/users/" + this.uuid, true);
      refreshCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200) {
            _thisUser._updateWithJSON(data);
            if (callbacks != null) {
              return callbacks.success(_thisUser);
            }
          } else if (callbacks != null) {
            return callbacks.failure(_thisUser, "Unable to parse response");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(refreshCallbacks, false);
    };

    /** Delete the user from the server
    @param {Object} callbacks An object with callback methods defined
    @param {Method} callbacks.success The callback method to call on a successful delete request
    @param {Method} callbacks.failure The callback method to call on a failed delete request
    @example 
    var user = Kii.getCurrentUser(); // a KiiUser
    obj.delete({
        success: function(theDeletedUser) {
            // do something
        },
        
        failure: function(theUser, anErrorString) {
            // do something with the error response
        }
    });
    */


    KiiUser.prototype["delete"] = function(callbacks) {
      var refreshCallbacks, request,
        _this = this;
      _thisUser = this;
      request = new KiiRequest("/users/" + this.uuid, true);
      request.method = "DELETE";
      refreshCallbacks = {
        success: function(data, statusCode) {
          if (statusCode < 300 && statusCode >= 200 && (callbacks != null)) {
            return callbacks.success(_thisUser);
          } else if (callbacks != null) {
            return callbacks.failure(_thisUser, "Unable to parse response");
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(_thisUser, error);
          }
        }
      };
      return request.execute(refreshCallbacks, true);
    };

    /**
        Logs the currently logged-in user out of the KiiSDK
        @example
        KiiUser.logOut();
    */


    KiiUser.logOut = function() {
      return Kii.logOut();
    };

    /**
        Checks to see if there is a user authenticated with the SDK
        @example
        if(KiiUser.loggedIn()) {
            // do something
        }
    */


    KiiUser.loggedIn = function() {
      return Kii.loggedIn();
    };

    /**
        Retrieves the currently logged-in user
        @example
        KiiUser.getCurrentUser();
    */


    KiiUser.getCurrentUser = function() {
      return Kii.getCurrentUser();
    };

    KiiUser.prototype._updateWithJSON = function(json) {
      var key, value;
      Kii.logger("Updating with:");
      Kii.logger(json);
      for (key in json) {
        value = json[key];
        Kii.logger("key/val => " + key + "/" + value);
        if (key === "userID" || key === "id") {
          this.uuid = value;
        } else if (key === "created" || key === "createdAt" || key === "_created") {
          this.created = value;
        } else if (key === "modified" || key === "modifiedAt" || key === "_modified") {
          this.modified = value;
        } else if (key === "loginName") {
          this.username = value;
        } else if (key === "displayName") {
          this.displayName = value;
        } else if (key === "country") {
          this.country = value;
        } else if (key === "emailAddress") {
          this.emailAddress = value;
        } else if (key === "phoneNumber") {
          this.phoneNumber = value;
        } else if (key === "emailAddressVerified") {
          this.emailAddressVerified = value;
        } else if (key === "phoneNumberVerified") {
          this.phoneNumberVerified = value;
        } else if (key.substring(0, 1 === !"_")) {
          this._customInfo[key] = value;
        }
      }
      if (!(this.displayName != null)) {
        return this.displayName = this.username;
      }
    };

    return KiiUser;

  }).call(this);

  KiiUtilities = (function() {

    function KiiUtilities() {}

    KiiUtilities.arrayRemove = function(array, from, to) {
      var rest;
      rest = array.slice(((to || from) + 1) || array.length);
      array.length = from < 0 ? array.length + from : from;
      return array.push.apply(array, rest);
    };

    return KiiUtilities;

  }).call(this);

  /**
      @class Represents a KiiSocialConnect object
      @exports root.KiiACL as KiiACL
  */


  root.KiiSocialConnect = (function() {
    var _instance;

    function KiiSocialConnect() {}

    _instance = null;

    /** Set up a reference to one of the supported KiiSocialNetworks.
     
     The user will not be authenticated or linked to a KiiUser
     until one of those methods are called explicitly.
     @param {KiiSocialNetworkName} networkName One of the supported KiiSocialNetworkName values
     @param {String} apiKey The SDK key assigned by the social network provider
     @param {String} apiSecret The SDK secret assigned by the social network provider
     @param {Object} extras Extra options that should be passed to the SNS. Examples could be (Facebook) a dictionary of permissions to grant to the authenticated user.
    */


    KiiSocialConnect.setupNetwork = function(networkName, apiKey, apiSecret, extras) {
      var manager;
      if (_instance == null) {
        _instance = new _KiiSocialConnect;
      }
      manager = _instance.getManager(networkName);
      manager.reset();
      manager.setup(apiKey, apiSecret, extras);
      return Kii.logger("Set key: " + manager._key);
    };

    /** Log a user into the social network provided
     
     This will initiate the login process for the given network. If a KiiUser has already been authenticated, this will authenticate and link the user to the network. Otherwise, this will generate a KiiUser that is automatically linked to the social network. The network must already be set up via setupNetwork
     @param networkName One of the supported KiiSocialNetworkName values
     @param {Object} callbacks An object with callback methods defined
     @param {Method} callbacks.success The callback method to call on a successful log in request
     @param {Method} callbacks.failure The callback method to call on a failed log in request
     @example 
     
     KiiSocialConnect.logIn(KiiSocialNetworkName.FACEBOOK, {
     
         success: function(user, network) {
             // do something now that the user is logged in
         },
        
         failure: function(user, network, anErrorString) {
             // do something with the error response
         }
     });
    */


    KiiSocialConnect.logIn = function(networkName, callbacks) {
      return _instance.getManager(networkName).logIn(callbacks);
    };

    /** Link the currently logged in user with a social network
     
     This will initiate the login process for the given network, which for SSO-enabled services like Facebook, will send the user to the Facebook site for authentication. There must be a currently authenticated KiiUser. Otherwise, you can use the logIn: method to create and log in a KiiUser using a network. The network must already be set up via setupNetwork
     @param networkName One of the supported KiiSocialNetworkName values
     @param {Object} callbacks An object with callback methods defined
     @param {Method} callbacks.success The callback method to call on a successful log in request
     @param {Method} callbacks.failure The callback method to call on a failed log in request
     @example 
     
     KiiSocialConnect.linkCurrentUserWithNetwork(KiiSocialNetworkName.FACEBOOK, {
     
         success: function(user, network) {
             // do something now that the user is linked
         },
        
         failure: function(user, network, anErrorString) {
             // do something with the error response
         }
     });
    */


    KiiSocialConnect.linkCurrentUserWithNetwork = function(networkName, callbacks) {
      Kii.logger("Trying with manager");
      Kii.logger(_instance.getManager(networkName));
      Kii.logger("And key: " + (_instance.getManager(networkName)._key));
      return _instance.getManager(networkName).linkWithCurrentUser(callbacks);
    };

    /** Unlink the currently logged in user with a social network
     
     The network must already be set up via setupNetwork
     @param networkName One of the supported KiiSocialNetworkName values
     @param {Object} callbacks An object with callback methods defined
     @param {Method} callbacks.success The callback method to call on a successful log in request
     @param {Method} callbacks.failure The callback method to call on a failed log in request
     @example 
     
     KiiSocialConnect.unLinkCurrentUserFromNetwork(KiiSocialNetworkName.FACEBOOK, {
     
         success: function(user, network) {
             // do something now that the user is unlinked
         },
        
         failure: function(user, network, anErrorString) {
             // do something with the error response
         }
     });
    */


    KiiSocialConnect.unLinkCurrentUserFromNetwork = function(networkName, callbacks) {
      return _instance.getManager(networkName).unLinkCurrentUserFromNetwork(callbacks);
    };

    return KiiSocialConnect;

  }).call(this);

  _KiiSocialConnect = (function() {

    function _KiiSocialConnect() {
      this.getManager = __bind(this.getManager, this);

    }

    _KiiSocialConnect.prototype._className = "KiiSocialConnect";

    _KiiSocialConnect.prototype._facebookManager = null;

    _KiiSocialConnect.prototype.getManager = function(networkName) {
      if (networkName === KiiSocialNetworkName.FACEBOOK) {
        if (!(this._facebookManager != null)) {
          return this._facebookManager = new KiiSCNFacebook();
        } else {
          return this._facebookManager;
        }
      }
    };

    return _KiiSocialConnect;

  })();

  root.KiiSocialConnectNetwork = (function() {

    KiiSocialConnectNetwork.prototype._className = "KiiSocialConnectNetwork";

    KiiSocialConnectNetwork.prototype._network = null;

    KiiSocialConnectNetwork.prototype._key = null;

    KiiSocialConnectNetwork.prototype._secret = null;

    KiiSocialConnectNetwork.prototype._extras = null;

    KiiSocialConnectNetwork.prototype._token = null;

    KiiSocialConnectNetwork.prototype._callbacks = null;

    function KiiSocialConnectNetwork(_network) {
      this._network = _network;
      this.setup = __bind(this.setup, this);

      this.unlinkFromCurrentUser = __bind(this.unlinkFromCurrentUser, this);

      this.linkWithCurrentUser = __bind(this.linkWithCurrentUser, this);

      this.logOut = __bind(this.logOut, this);

      this.logIn = __bind(this.logIn, this);

      this.reset = __bind(this.reset, this);

      this.isAuthenticated = __bind(this.isAuthenticated, this);

    }

    KiiSocialConnectNetwork.prototype.isAuthenticated = function() {
      return this._token != null;
    };

    KiiSocialConnectNetwork.prototype.reset = function() {
      this._token = null;
      this._key = null;
      this._secret = null;
      return this._extras = null;
    };

    KiiSocialConnectNetwork.prototype.logIn = function(_callbacks) {
      this._callbacks = _callbacks;
    };

    KiiSocialConnectNetwork.prototype.logOut = function() {};

    KiiSocialConnectNetwork.prototype.linkWithCurrentUser = function(_callbacks) {
      this._callbacks = _callbacks;
    };

    KiiSocialConnectNetwork.prototype.unlinkFromCurrentUser = function(_callbacks) {
      this._callbacks = _callbacks;
    };

    KiiSocialConnectNetwork.prototype.setup = function(_key, _secret, _extras) {
      this._key = _key;
      this._secret = _secret;
      this._extras = _extras;
    };

    return KiiSocialConnectNetwork;

  })();

  root.KiiSCNFacebook = (function(_super) {

    __extends(KiiSCNFacebook, _super);

    KiiSCNFacebook.prototype._className = "KiiSocialConnectNetwork";

    KiiSCNFacebook.prototype._authWindow = null;

    function KiiSCNFacebook() {
      this.unlinkFromCurrentUser = __bind(this.unlinkFromCurrentUser, this);

      this.linkWithCurrentUser = __bind(this.linkWithCurrentUser, this);

      this.logOut = __bind(this.logOut, this);

      this.logIn = __bind(this.logIn, this);

      this.unlink = __bind(this.unlink, this);

      this.link = __bind(this.link, this);

      this.register = __bind(this.register, this);

      this.setup = __bind(this.setup, this);
      KiiSCNFacebook.__super__.constructor.call(this, KiiSocialNetworkName.FACEBOOK);
    }

    KiiSCNFacebook.prototype.setup = function(_key, _secret, _extras) {
      this._key = _key;
      this._secret = _secret;
      this._extras = _extras;
      KiiSCNFacebook.__super__.setup.call(this, this._key, this._secret, this._extras);
      this._extras.appId = this._key;
      Kii.logger(this._extras);
      return FB.init(this._extras);
    };

    KiiSCNFacebook.prototype.register = function(token, expires) {
      var registrationCallbacks, request,
        _this = this;
      _this = this;
      request = new KiiRequest("/integration/facebook", true);
      request.method = "POST";
      request.data = {
        accessToken: token
      };
      request.anonymous = true;
      request.contentType = "application/vnd.kii.AuthTokenFacebookRequest+json";
      registrationCallbacks = {
        success: function(data) {
          var user;
          user = new KiiUser();
          user._updateWithJSON(data);
          Kii.setAccessToken(data['access_token']);
          Kii.setAccessTokenExpires(data['expires_in']);
          Kii.setCurrentUser(user);
          return _this._callbacks.success(KiiUser.getCurrentUser(), _this._network);
        },
        failure: function(error, statusCode) {
          return _this._callbacks.failure(null, _this._network(error));
        }
      };
      return request.execute(registrationCallbacks, false);
    };

    KiiSCNFacebook.prototype.link = function(token, expires) {
      var linkCallbacks, request,
        _this = this;
      _this = this;
      request = new KiiRequest("/users/me/facebook/link", true);
      request.method = "POST";
      request.data = {
        accessToken: token
      };
      linkCallbacks = {
        success: function(data) {
          return _this._callbacks.success(KiiUser.getCurrentUser(), _this._network);
        },
        failure: function(error, statusCode) {
          return _this._callbacks.failure(KiiUser.getCurrentUser(), _this._network, error);
        }
      };
      return request.execute(linkCallbacks, true);
    };

    KiiSCNFacebook.prototype.unlink = function() {
      var request, unlinkCallbacks,
        _this = this;
      _this = this;
      request = new KiiRequest("/users/me/facebook/unlink", true);
      request.method = "POST";
      unlinkCallbacks = {
        success: function(data) {
          return _this._callbacks.success(KiiUser.getCurrentUser(), _this._network);
        },
        failure: function(error, statusCode) {
          return _this._callbacks.failure(KiiUser.getCurrentUser(), _this._network, error);
        }
      };
      return request.execute(unlinkCallbacks, true);
    };

    KiiSCNFacebook.prototype.logIn = function(callbacks) {
      var _this = this;
      KiiSCNFacebook.__super__.logIn.call(this, callbacks);
      Kii.logger("should auth fb");
      _this = this;
      return FB.login(function(response) {
        if (response.authResponse) {
          if (KiiUser.getCurrentUser() != null) {
            return _this.register(response.authResponse.accessToken, response.authResponse.expiresIn);
          } else {
            return _this.link(response.authResponse.accessToken, response.authResponse.expiresIn);
          }
        } else {
          return _this._callbacks.failure(null, _this._network, "User cancelled login or did not fully authorize");
        }
      });
    };

    KiiSCNFacebook.prototype.logOut = function() {
      KiiSCNFacebook.__super__.logOut.apply(this, arguments);
      return Kii.logger("Log out fb");
    };

    KiiSCNFacebook.prototype.linkWithCurrentUser = function(callbacks) {
      var _this = this;
      KiiSCNFacebook.__super__.linkWithCurrentUser.call(this, callbacks);
      _this = this;
      if (KiiUser.getCurrentUser() != null) {
        return FB.login(function(response) {
          if (response.authResponse) {
            return _this.link(response.authResponse.accessToken, response.authResponse.expiresIn);
          } else {
            return _this._callbacks.failure(null, _this._network, "User cancelled Facebook login or did not fully authorize");
          }
        });
      } else {
        return callbacks.failure("A KiiUser must be logged in before linking to Facebook");
      }
    };

    KiiSCNFacebook.prototype.unlinkFromCurrentUser = function(callbacks) {
      KiiSCNFacebook.__super__.unlinkFromCurrentUser.call(this, callbacks);
      if (KiiUser.getCurrentUser() != null) {
        return _this.unlink();
      } else {
        return callbacks.failure("A KiiUser must be logged in before unlinking from Facebook");
      }
    };

    return KiiSCNFacebook;

  })(root.KiiSocialConnectNetwork);

  root.InvalidDisplayNameException = function() {
    return this.message = "Unable to set displayName. Must be between 4-50 alphanumeric characters, must start with a letter";
  };

  root.InvalidPasswordException = function() {
    return this.message = "Unable to set password. Must be at least 4 characters, made up of alphanumeric and/or: @,#,$,%,^,&";
  };

  root.InvalidUsernameException = function() {
    return this.message = "Unable to set username. Must be between 4-64 alphanumeric characters, must start with a letter";
  };

  root.InvalidEmailException = function() {
    return this.message = "Unable to set email address. Must be a valid email";
  };

  root.InvalidPhoneNumberException = function() {
    return this.message = "Unable to set phone number. Must begin with a '+' and be at least 10 digits";
  };

}).call(this);